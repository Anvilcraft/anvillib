buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.orgP/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
    }
}

apply plugin: 'forge'
apply plugin: 'maven-publish'
apply from: './gradle/scripts/mixins.gradle'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

version = "0.1.0"
group= "net.anvilcraft"
archivesBaseName = "anvillib-7"

configurations {
    embedded
    implementation.extendsFrom(embedded)
}

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "run"

    replaceIn "net/anvilcraft/anvillib/AnvilLib.java"
    replace "{VERSION}", project.version
}

repositories {
    mavenCentral()
    maven { url = "https://maven.tilera.xyz" }
    maven { url = "https://jitpack.io" }
}

dependencies {
    embedded "net.anvilcraft:jalec:0.1.2"
    implementation "com.github.tox1cozZ:mixin-booter-legacy:1.1.2"
    annotationProcessor "com.github.tox1cozZ:mixin-booter-legacy:1.1.2:processor"
}

jar {
    from (configurations.embedded.collect { it.isDirectory() ? it : zipTree(it) }) {
       duplicatesStrategy = 'exclude'
       exclude 'LICENSE.txt', 'META-INF/MANIFSET.MF', 'META-INF/maven/**', 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/services/*.Processor', 'META-INF/versions/**'
    }

    manifest {
        attributes([
                "FMLCorePlugin": "net.anvilcraft.anvillib.AnvilCore",
                "FMLCorePluginContainsFMLMod": "true",
                "FMLAT": "anvillib_at.cfg"
        ])
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    filesMatching('mcmod.info') {
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'

    manifest {
        attributes([
                "FMLCorePlugin": "net.anvilcraft.anvillib.AnvilCore",
                "FMLCorePluginContainsFMLMod": "true",
                "FMLAT": "anvillib_at.cfg"
        ])
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archivesBaseName

            artifact deobfJar
            artifact sourcesJar
            artifact jar

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def mixins = dependenciesNode.appendNode('dependency')
                mixins.appendNode('groupId', 'com.github.tox1cozZ')
                mixins.appendNode('artifactId', 'mixin-booter-legacy')
                mixins.appendNode('version', '1.1.2')
                def jalec = dependenciesNode.appendNode('dependency')
                jalec.appendNode('groupId', 'net.anvilcraft')
                jalec.appendNode('artifactId', 'jalec')
                jalec.appendNode('version', '0.1.2')
            }
        }
    }

    repositories {
        if (project.hasProperty('mvnURL')) {
                maven {
                    credentials {
                        username findProperty("mvnUsername")
                        password findProperty("mvnPassword")
                    }
                    url = findProperty("mvnURL")
                }
        }
        else {
                mavenLocal()
        }
    }
}

mixin {
    mixinRefMapName = 'anvillib.refmap.json'
}